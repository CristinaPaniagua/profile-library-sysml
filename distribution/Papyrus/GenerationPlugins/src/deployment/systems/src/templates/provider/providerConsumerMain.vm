package eu.arrowhead.provider;

import java.util.List;

import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.databind.ObjectMapper;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.ApplicationArguments;
import org.springframework.boot.ApplicationRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.ComponentScan;

import ai.aitia.arrowhead.application.library.ArrowheadService;
import eu.arrowhead.common.CommonConstants;
import eu.arrowhead.common.SSLProperties;
import eu.arrowhead.common.Utilities;
import eu.arrowhead.common.dto.shared.OrchestrationFlags.Flag;
import eu.arrowhead.common.dto.shared.OrchestrationFormRequestDTO;
import eu.arrowhead.common.dto.shared.OrchestrationFormRequestDTO.Builder;
import eu.arrowhead.common.dto.shared.OrchestrationResponseDTO;
import eu.arrowhead.common.dto.shared.OrchestrationResultDTO;
import eu.arrowhead.common.dto.shared.ServiceInterfaceResponseDTO;
import eu.arrowhead.common.dto.shared.ServiceQueryFormDTO;
import eu.arrowhead.common.exception.InvalidParameterException;
import java.io.IOException;

#if($httpFlag==true)
import org.apache.http.HttpEntity;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
#end

#if($coapFlag==true)
import java.net.URI;
import java.net.URISyntaxException;
import org.eclipse.californium.core.CoapClient;
import org.eclipse.californium.core.CoapResponse;
import org.eclipse.californium.core.coap.MediaTypeRegistry;
import org.eclipse.californium.core.network.config.NetworkConfig;
import org.eclipse.californium.core.network.config.NetworkConfigDefaultHandler;
import org.eclipse.californium.elements.exception.ConnectorException;
#end

#foreach( $dto in $dtos )
import eu.arrowhead.provider.dto.$dto;
#end

@SpringBootApplication
@ComponentScan(basePackages = {CommonConstants.BASE_PACKAGE, "eu.arrowhead", "ai.aitia"})
public class ${sysName}ProviderMain implements ApplicationRunner {
    
    //=================================================================================================
	// members
	
    @Autowired
	private ArrowheadService arrowheadService;
    
    @Autowired
	protected SSLProperties sslProperties;
    
    private final Logger logger = LogManager.getLogger(${sysName}ProviderMain.class);
    
    
    //=================================================================================================
	// methods

	//------------------------------------------------------------------------------------------------
    public static void main( final String[] args ) {
    	SpringApplication.run(${sysName}ProviderMain.class, args);
    }

    //-------------------------------------------------------------------------------------------------
    @Override
	public void run(final ApplicationArguments args) throws Exception {
#foreach( $interface in $interfaces )
#set($operations=$interface.getOperations())
	#foreach( $operation in $operations  )
    	$interface.getName()_$operation.getName()_Consumption();
	#end
#end

#if($coap==true)
		try {
            ServerApplication coapServer= new ServerApplication();
			coapServer.start();
		}
        catch (Exception e) {
         	e.printStackTrace();
        }
#end
	}
#set($GET_HTTP=0)
#set($POST_HTTP=0)
#set($GET_COAP=0)
#set($POST_COAP=0)
    
#foreach( $interface in $interfaces )
#set($operations=$interface.getOperations())
	#foreach( $operation in $operations )
    //-------------------------------------------------------------------------------------------------
    public void $interface.getName()_$operation.getName()_Consumption() {
    	logger.info("Orchestration request for " + "$interface.getName()" + " service:");
    	final ServiceQueryFormDTO serviceQueryForm = new ServiceQueryFormDTO.Builder("$interface.getName()").interfaces(getInterface()).build();
    	
		final Builder orchestrationFormBuilder = arrowheadService.getOrchestrationFormBuilder();
		final OrchestrationFormRequestDTO orchestrationFormRequest = orchestrationFormBuilder.requestedService(serviceQueryForm)
																					   .flag(Flag.MATCHMAKING, false)
																					   .flag(Flag.OVERRIDE_STORE, true)
																					   .build();
		
		printOut(orchestrationFormRequest);		
		
		final OrchestrationResponseDTO orchestrationResponse = arrowheadService.proceedOrchestration(orchestrationFormRequest);
		
		logger.info("Orchestration response:");
		printOut(orchestrationResponse);		
		
		if (orchestrationResponse == null) {
			logger.info("No orchestration response received");
		} else if (orchestrationResponse.getResponse().isEmpty()) {
			logger.info("No provider found during the orchestration");
		} else {
			final OrchestrationResultDTO orchestrationResult = orchestrationResponse.getResponse().get(0);
			validateOrchestrationResult(orchestrationResult, "$interface.getName()");
			
		 	try{ 
		#if($interface.getProtocol()=="CoAP")		
			#if($operation.getMethod() == "GET")
				String result= sendCoapGet("http://"+orchestrationResult.getProvider().getAddress()+":"+orchestrationResult.getProvider().getPort()+"/"+orchestrationResult.getServiceUri());
			#set($GET_COAP=$GET_COAP+1)
			#elseif($operation.getMethod()== "POST")
			#set($POST_COAP=$POST_COAP+1)
				#if($interface.getEncoding()=="CBOR")
				// Payload Generation
			 	CBORFactory f = new CBORFactory();
	    		ObjectMapper mapper = new ObjectMapper(f);
	    		$operation.capitalizeService()RequestDTO request = new $operation.capitalizeService()RequestDTO();
				byte[] payload = mapper.writeValueAsBytes(request);
			
				// Service Consumption
				byte[] result= sendCoapPost("http://"+orchestrationResult.getProvider().getAddress()+":"+orchestrationResult.getProvider().getPort()+"/"+orchestrationResult.getServiceUri(),payload);
					#elseif($interface.getEncoding()=="JSON")
				// Payload Generation
				JsonFactory jsonFactory_objMapper = new JsonFactory();
				ObjectMapper objMapper = new ObjectMapper(jsonFactory_objMapper);
				$operation.capitalizeService()RequestDTO request = new $operation.capitalizeService()RequestDTO();
				String payload = objMapper.writeValueAsString(request);
				
				// Service Consumption
				String result= sendCoapPost("http://"+orchestrationResult.getProvider().getAddress()+":"+orchestrationResult.getProvider().getPort()+"/"+orchestrationResult.getServiceUri(),payload);
					#elseif($interface.getEncoding()=="XML")
				// Payload Generation
				ObjectMapper objMapper = new XmlMapper();
				$operation.capitalizeService()RequestDTO request = new $operation.capitalizeService()RequestDTO();
				String payload = objMapper.writeValueAsString(request);
					
				// Service Consumption	
				String result= sendCoapPost("http://"+orchestrationResult.getProvider().getAddress()+":"+orchestrationResult.getProvider().getPort()+"/"+orchestrationResult.getServiceUri(),payload);
					#else 
				// TODO Payload Generation
				// Service Consumption
				String result= sendCoapPost("http://"+orchestrationResult.getProvider().getAddress()+":"+orchestrationResult.getProvider().getPort()+"/"+orchestrationResult.getServiceUri(),payload);	
					#end
				#else
				
				// TODO PUT and DELETE methods
				#end
			}catch (Exception e) {
              e.printStackTrace();
           }	
		}
    }
    
			#if($operation.getMethod()=="GET")
 				#if($GET_COAP==1)
  	// Service Consumption - GET COAP
   					#if($interface.getEncoding()=="CBOR")
    public static byte[] sendCoapGet(String url) throws IOException {
   					#else
    public static String sendCoapGet(String url) throws IOException {
   					#end
   		
    	File CONFIG_FILE = new File("Californium.properties");
    
		String CONFIG_HEADER = "Californium CoAP Properties file for Fileclient";
		int DEFAULT_MAX_RESOURCE_SIZE = 2 * 1024 * 1024; // 2 MB
		int DEFAULT_BLOCK_SIZE = 512;
		
	    NetworkConfigDefaultHandler DEFAULTS = new NetworkConfigDefaultHandler() {
			@Override
			public void applyDefaults(NetworkConfig config) {
				config.setInt(NetworkConfig.Keys.MAX_RESOURCE_BODY_SIZE, DEFAULT_MAX_RESOURCE_SIZE);
				config.setInt(NetworkConfig.Keys.MAX_MESSAGE_SIZE, DEFAULT_BLOCK_SIZE);
				config.setInt(NetworkConfig.Keys.PREFERRED_BLOCK_SIZE, DEFAULT_BLOCK_SIZE);
	        		};
	    };
				
	    NetworkConfig config = NetworkConfig.createWithFile(CONFIG_FILE, CONFIG_HEADER, DEFAULTS);
	    NetworkConfig.setStandard(config);
	    URI uri = null;
			
	    try {
	      uri = new URI(url);
	    } catch(URISyntaxException e) {
	      System.err.println("Invalid URI: " + e.getMessage());
	      System.exit(-1);
	    }
	    
	    CoapClient client= new CoapClient(uri);
	    CoapResponse response = null;
	
     				#if($interface.getEncoding()=="CBOR")
      	byte[] responseText= null; 
      				#else
      	String responseText= " ";
      				#end  
	
	    try {
					#if($operation.getMethod()=="GET")
	        response = client.get();
					#elseif($method=="POST")
	        response = client.post(payload,MediaTypeRegistry.APPLICATION_$encoding);
       				#else
	        //TODO Not implemented PUT and DELETE methods
					#end
	    } catch(ConnectorException|IOException e) {
	      	System.err.println("Got an error: " + e);
	    }
	    
	    if(response!=null) {
      				#if($encoding=="CBOR")
	      	responseText = response.getPayload();
      				#else
	      	responseText = response.getResponseText();
      				#end  
	    } else {
	      	System.out.println("No response received.");
	    }
	    client.shutdown();
	  
	    return responseText;
	  }
				#end
			#else
  				#if($POST_COAP==1)
 	// Service Consumption - POST COAP
					#if($interface.getEncoding()=="CBOR")
	public static byte[] sendCoapPost(String url, String payload) throws IOException {
					#else 
	public static String sendCoapPost(String url, String payload) throws IOException {
					#end
		File CONFIG_FILE = new File("Californium.properties");
		
		String CONFIG_HEADER = "Californium CoAP Properties file for Fileclient";
		int DEFAULT_MAX_RESOURCE_SIZE = 2 * 1024 * 1024; // 2 MB
		int DEFAULT_BLOCK_SIZE = 512;
		
	    NetworkConfigDefaultHandler DEFAULTS = new NetworkConfigDefaultHandler() {
			@Override
			public void applyDefaults(NetworkConfig config) {
				config.setInt(NetworkConfig.Keys.MAX_RESOURCE_BODY_SIZE, DEFAULT_MAX_RESOURCE_SIZE);
				config.setInt(NetworkConfig.Keys.MAX_MESSAGE_SIZE, DEFAULT_BLOCK_SIZE);
				config.setInt(NetworkConfig.Keys.PREFERRED_BLOCK_SIZE, DEFAULT_BLOCK_SIZE);
			};
		};
					
	    NetworkConfig config = NetworkConfig.createWithFile(CONFIG_FILE, CONFIG_HEADER, DEFAULTS);
	    NetworkConfig.setStandard(config);
	    URI uri = null;
		
	    try {
	      uri = new URI(url);
	    } catch(URISyntaxException e) {
	      System.err.println("Invalid URI: " + e.getMessage());
	      System.exit(-1);
	    }
	    
	    CoapClient client= new CoapClient(uri);
	    CoapResponse response = null;
	
      				#if($interface.getEncoding()=="CBOR")
	    byte[] responseText= null; 
      				#else
	    String responseText= " ";
      				#end  
	
	    try {
					#if($operation.getMethod()=="GET")
        	response = client.get();
					#elseif($operation.getMethod()=="POST")
	        response = client.post(payload,MediaTypeRegistry.APPLICATION_$encoding);
        			#else
	        //TODO Not implemented PUT and DELETE methods
					#end
	    } catch(ConnectorException|IOException e) {
	      System.err.println("Got an error: " + e);
	    }
	    
	    if(response!=null) {
      				#if($interface.getEncoding()=="CBOR")
	      	responseText= response.getPayload();
      				#else
	      	responseText= response.getResponseText();
      				#end  
	    } else {
	      	System.out.println("No response received.");
	    }
	    client.shutdown();
	  
	    return responseText;
	  }
 				#end    
 			#end
		  
 		#elseif($interface.getProtocol()=="HTTP_1_1")	
  			#if($operation.getMethod() == "GET")
				String result = sendGet("http://"+orchestrationResult.getProvider().getAddress()+":"+orchestrationResult.getProvider().getPort()+"/"+orchestrationResult.getServiceUri());
			#set($GET_HTTP=$GET_HTTP+1)
			#elseif($operation.getMethod()== "POST")
			#set($POST_HTTP=$POST_HTTP+1)
				#if($interface.getEncoding()=="CBOR")
				// Payload Generation
			 	CBORFactory f = new CBORFactory();
				ObjectMapper mapper = new ObjectMapper(f);
				$operation.capitalizeService()RequestDTO request = new $operation.capitalizeService()RequestDTO();
				byte[] payload=mapper.writeValueAsBytes(request);
						
				// Service Consumption	
				byte[] result= sendPost_Bytes("http://"+orchestrationResult.getProvider().getAddress()+":"+orchestrationResult.getProvider().getPort()+"/"+orchestrationResult.getServiceUri(),payload);
				#elseif($interface.getEncoding()=="JSON")
				// Payload Generation
				JsonFactory jsonFactory_objMapper = new JsonFactory();
				ObjectMapper objMapper = new ObjectMapper(jsonFactory_objMapper);
				$operation.capitalizeService()RequestDTO request = new $operation.capitalizeService()RequestDTO();
				String payload=objMapper.writeValueAsString(request);
				
				// Service Consumption
				String result= sendPost("http://"+orchestrationResult.getProvider().getAddress()+":"+orchestrationResult.getProvider().getPort()+"/"+orchestrationResult.getServiceUri(),payload);
				#elseif($interface.getEncoding()=="XML")
				// Payload Generation
				ObjectMapper objMapper = new XmlMapper();
				$operation.capitalizeService()RequestDTO request = new $operation.capitalizeService()RequestDTO();
				String payload=objMapper.writeValueAsString(request);
				
				// Service Consumption
				String result= sendPost("http://"+orchestrationResult.getProvider().getAddress()+":"+orchestrationResult.getProvider().getPort()+"/"+orchestrationResult.getServiceUri(),payload);
				#else 
				// TODO Not implemented encoding payload generation
				// Service Consumption
				String result= sendPost("http://"+orchestrationResult.getProvider().getAddress()+":"+orchestrationResult.getProvider().getPort()+"/"+orchestrationResult.getServiceUri(),payload);	
				#end
			#else
				//TODO Not implemented PUT and DELETE methods
			#end
			}catch (Exception e) {
	          e.printStackTrace();
	        }	
		}
	}
    		#if($operation.getMethod()== "GET")
				#if($GET_HTTP==1)
	// Service Consumption - GET HTTP
	private static String sendGet(String url) throws IOException {
        
		CloseableHttpClient httpClient = HttpClients.createDefault();
    	String result="";
        
        try {
            HttpGet request = new HttpGet(url);
			CloseableHttpResponse response = httpClient.execute(request);

            try {
            	if (response.getEntity() != null) {
	                result = EntityUtils.toString(response.getEntity());   // Return it as a String
	                System.out.println(result);
            	}
            } finally {
                response.close();
            }
        } finally {
            httpClient.close();
        }
    
        return result;
    }
    			#end
			#elseif($operation.getMethod() == "POST")
				#if($POST_HTTP==1)
	// Service Consumption - POST HTTP
		 			#if( $interface.getEncoding()== "CBOR")
	private static  byte[] sendPost_Bytes(String url, byte[]  payload) throws IOException {

        CloseableHttpClient httpClient = HttpClients.createDefault();
        byte[] result;
        
        try {
            HttpPost request = new HttpPost(url);
            request.addHeader("content-type", "application/cbor"); // Add request headers
             
        	// Send CBOR data
          	EntityBuilder eb = EntityBuilder.create();
            eb.setBinary(payload);
            request.setEntity(eb.build());
            CloseableHttpResponse response = httpClient.execute(request);
           
            try {
                System.out.println(response.getStatusLine().toString());        // HTTP/1.1 200 OK
                if (response.getEntity() != null) { 
                    result = EntityUtils.toByteArray(response.getEntity());
                    System.out.println("Response:" + result.toString());
                }
            } finally {
                response.close();
            }
        } finally {
            httpClient.close();
        }
    
        return result;
    }
		 			#else	
	private static String sendPost(String url, String payload) throws IOException {

	    CloseableHttpClient httpClient = HttpClients.createDefault();
	    String result = "";
	    
	    try {
	        HttpPost request = new HttpPost(url);
			request.addHeader("content-type", "application/$interface.getEncoding().toLowerCase()");  // Add request headers
	         
	    	// Send $interface.getEncoding() data
	        request.setEntity(new StringEntity(payload.toString()));
	        CloseableHttpResponse response = httpClient.execute(request);
	       
	        try {
	            System.out.println(response.getStatusLine().toString());        // HTTP/1.1 200 OK
	            if (response.getEntity() != null) {
	               result = EntityUtils.toString(response.getEntity());			// Return it as a String
	               System.out.println("Response:" + result);
	            }
	        } finally {
	            response.close();
	        }
	    } finally {
	        httpClient.close();
	    }
	
	    return result;
	}
        
					#end
				#end		
			#else
	// Service Consumption Method
	//TODO Not implemented PUT and DELETE methods 
			#end
	
		#else
				//TODO Not implemented protocols
			}catch (Exception e) {
	          e.printStackTrace();
	       	}	
		}
	}
  		#end
	#end 
#end 
 
    
    //=================================================================================================
	// assistant methods
    
    //-------------------------------------------------------------------------------------------------
    private String getInterface() {
    	return sslProperties.isSslEnabled() ? "HTTPS-SECURE-JSON" : "HTTP-INSECURE-JSON";
    }
    
   
    //-------------------------------------------------------------------------------------------------
    private void validateOrchestrationResult(final OrchestrationResultDTO orchestrationResult, final String serviceDefinitin) {
    	if (!orchestrationResult.getService().getServiceDefinition().equalsIgnoreCase(serviceDefinitin)) {
			throw new InvalidParameterException("Requested and orchestrated service definition do not match");
		}
    	
    	boolean hasValidInterface = false;
    	for (final ServiceInterfaceResponseDTO serviceInterface : orchestrationResult.getInterfaces()) {
			if (serviceInterface.getInterfaceName().equalsIgnoreCase(getInterface())) {
				hasValidInterface = true;
				break;
			}
		}
    	if (!hasValidInterface) {
    		throw new InvalidParameterException("Requested and orchestrated interface do not match");
		}
    }
    
    //-------------------------------------------------------------------------------------------------
    private void printOut(final Object object) {
    	System.out.println(Utilities.toPrettyJson(Utilities.toJson(object)));
    }
}